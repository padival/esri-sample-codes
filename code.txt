
## code used for adding extra fields for user registration and future edit for user

function wooc_extra_register_fields() {?>
       <p class="form-row form-row-wide">
       
      <input type="text" class="input-text" name="billing_phone" id="reg_billing_phone" placeholder="Phone Number *" value="<?php esc_attr_e( $_POST['billing_phone'] ); ?>" />
       </p>
       <p class="form-row form-row-first">
       
       <input type="text" class="input-text" name="billing_first_name" id="reg_billing_first_name" placeholder="First Name *" value="<?php if ( ! empty( $_POST['billing_first_name'] ) ) esc_attr_e( $_POST['billing_first_name'] ); ?>" />
       
       </p>
       <p class="form-row form-row-last">
      
       <input type="text" class="input-text" name="billing_last_name" id="reg_billing_last_name" placeholder="Last Name *" value="<?php if ( ! empty( $_POST['billing_last_name'] ) ) esc_attr_e( $_POST['billing_last_name'] ); ?>" />
       
       </p>
       <p class="form-row form-row-last">
      
       <input type="text" class="input-text" name="billing_company" id="reg_billing_company" placeholder="Business Name *" value="<?php if ( ! empty( $_POST['billing_company'] ) ) esc_attr_e( $_POST['billing_company'] ); ?>" />
       
       </p>
       
       <p class="form-row form-row-last">
      
       <input type="text" class="input-text" name="billing_address_1" id="reg_billing_address_1" placeholder="Address 1 *" value="<?php if ( ! empty( $_POST['billing_address_1'] ) ) esc_attr_e( $_POST['billing_address_1'] ); ?>" />
       
       </p>
       <p class="form-row form-row-last">
      
       <input type="text" class="input-text" name="billing_address_2" id="reg_billing_address_2" placeholder="Address 2 " value="<?php if ( ! empty( $_POST['billing_address_2'] ) ) esc_attr_e( $_POST['billing_address_2'] ); ?>" />
       
       </p>
       
       <p class="form-row form-row-last">
      
       <input type="text" class="input-text" name="billing_city" id="reg_billing_city" placeholder="City *" value="<?php if ( ! empty( $_POST['billing_city'] ) ) esc_attr_e( $_POST['billing_city'] ); ?>" />
       
       </p>
       
       <p class="form-row form-row-last">
      
       <input type="text" class="input-text" name="billing_postcode" id="reg_billing_postcode" placeholder="Zip Code *" value="<?php if ( ! empty( $_POST['billing_postcode'] ) ) esc_attr_e( $_POST['billing_postcode'] ); ?>" />
       
       </p>
       
       <p class="form-row form-row-last">
      
       <input type="text" class="input-text" name="billing_country" id="reg_billing_country" placeholder="Country *" value="<?php if ( ! empty( $_POST['billing_country'] ) ) esc_attr_e( $_POST['billing_country'] ); ?>" />
       
       </p>
          
       <p class="form-row form-row-last">
      
       <input type="text" class="input-text" name="billing_state" id="reg_billing_state" placeholder="State *" value="<?php if ( ! empty( $_POST['billing_state'] ) ) esc_attr_e( $_POST['billing_state'] ); ?>" />
       
       </p>
       
       <div class="clear"></div>
       <?php
 }
 add_action( 'woocommerce_register_form_start', 'wooc_extra_register_fields' );
 
 


function wooc_validate_extra_register_fields( $username, $email, $validation_errors ) {
      if ( isset( $_POST['billing_first_name'] ) && empty( $_POST['billing_first_name'] ) ) {
             $validation_errors->add( 'billing_first_name_error', __( '<strong>Error</strong>: First name is required!', 'woocommerce' ) );
      }
      if ( isset( $_POST['billing_last_name'] ) && empty( $_POST['billing_last_name'] ) ) {
             $validation_errors->add( 'billing_last_name_error', __( '<strong>Error</strong>: Last name is required!.', 'woocommerce' ) );
      }
      if ( isset( $_POST['billing_company'] ) && empty( $_POST['billing_company'] ) ) {
             $validation_errors->add( 'billing_company_error', __( '<strong>Error</strong>: Business Name is required!.', 'woocommerce' ) );
      }
      if ( isset( $_POST['billing_address_1'] ) && empty( $_POST['billing_address_1'] ) ) {
             $validation_errors->add( 'billing_address_1_error', __( '<strong>Error</strong>: Address is required!.', 'woocommerce' ) );
      }
      if ( isset( $_POST['billing_address_2'] ) && empty( $_POST['billing_address_2'] ) ) {
             $validation_errors->add( 'billing_address_2_error', __( '<strong>Error</strong>: Address is required!.', 'woocommerce' ) );
      }
      if ( isset( $_POST['billing_city'] ) && empty( $_POST['billing_city'] ) ) {
             $validation_errors->add( 'billing_city_error', __( '<strong>Error</strong>: City is required!.', 'woocommerce' ) );
      }
      if ( isset( $_POST['billing_postcode'] ) && empty( $_POST['billing_postcode'] ) ) {
             $validation_errors->add( 'billing_postcode_error', __( '<strong>Error</strong>: Zipcode is required!.', 'woocommerce' ) );
      }
      if ( isset( $_POST['billing_country'] ) && empty( $_POST['billing_country'] ) ) {
             $validation_errors->add( 'billing_country_error', __( '<strong>Error</strong>: Country is required!.', 'woocommerce' ) );
      }
      if ( isset( $_POST['billing_state'] ) && empty( $_POST['billing_state'] ) ) {
             $validation_errors->add( 'billing_state_error', __( '<strong>Error</strong>: State is required!.', 'woocommerce' ) );
      }
         return $validation_errors;
}
add_action( 'woocommerce_register_post', 'wooc_validate_extra_register_fields', 10, 3 );

function wooc_save_extra_register_fields( $customer_id ) {
    if ( isset( $_POST['billing_phone'] ) ) {
                 // Phone input filed which is used in WooCommerce
                 update_user_meta( $customer_id, 'billing_phone', sanitize_text_field( $_POST['billing_phone'] ) );
          }
      if ( isset( $_POST['billing_first_name'] ) ) {
             //First name field which is by default
             update_user_meta( $customer_id, 'first_name', sanitize_text_field( $_POST['billing_first_name'] ) );
             // First name field which is used in WooCommerce
             update_user_meta( $customer_id, 'billing_first_name', sanitize_text_field( $_POST['billing_first_name'] ) );
      }
      if ( isset( $_POST['billing_last_name'] ) ) {
             // Last name field which is by default
             update_user_meta( $customer_id, 'last_name', sanitize_text_field( $_POST['billing_last_name'] ) );
             // Last name field which is used in WooCommerce
             update_user_meta( $customer_id, 'billing_last_name', sanitize_text_field( $_POST['billing_last_name'] ) );
      }
      if ( isset( $_POST['billing_company'] ) ) {
             // Last name field which is by default
             update_user_meta( $customer_id, 'company', sanitize_text_field( $_POST['billing_company'] ) );
             // Last name field which is used in WooCommerce
             update_user_meta( $customer_id, 'billing_company', sanitize_text_field( $_POST['billing_company'] ) );
      }
      if ( isset( $_POST['billing_address_1'] ) ) {
             // Last name field which is by default
             update_user_meta( $customer_id, 'address', sanitize_text_field( $_POST['billing_address_1'] ) );
             // Last name field which is used in WooCommerce
             update_user_meta( $customer_id, 'billing_address_1', sanitize_text_field( $_POST['billing_address_1'] ) );
      }
      if ( isset( $_POST['billing_address_2'] ) ) {
             // Last name field which is by default
             update_user_meta( $customer_id, 'address2', sanitize_text_field( $_POST['billing_address_2'] ) );
             // Last name field which is used in WooCommerce
             update_user_meta( $customer_id, 'billing_address_2', sanitize_text_field( $_POST['billing_address_2'] ) );
      }
      if ( isset( $_POST['billing_city'] ) ) {
             // Last name field which is by default
             update_user_meta( $customer_id, 'city', sanitize_text_field( $_POST['billing_city'] ) );
             // Last name field which is used in WooCommerce
             update_user_meta( $customer_id, 'billing_city', sanitize_text_field( $_POST['billing_city'] ) );
      }
       if ( isset( $_POST['billing_postcode'] ) ) {
             // Last name field which is by default
             update_user_meta( $customer_id, 'postcode', sanitize_text_field( $_POST['billing_postcode'] ) );
             // Last name field which is used in WooCommerce
             update_user_meta( $customer_id, 'billing_postcode', sanitize_text_field( $_POST['billing_postcode'] ) );
      }
       if ( isset( $_POST['billing_country'] ) ) {
             // Last name field which is by default
             update_user_meta( $customer_id, 'country', sanitize_text_field( $_POST['billing_country'] ) );
             // Last name field which is used in WooCommerce
             update_user_meta( $customer_id, 'billing_country', sanitize_text_field( $_POST['billing_country'] ) );
      }
      if ( isset( $_POST['billing_state'] ) ) {
             // Last name field which is by default
             update_user_meta( $customer_id, 'state', sanitize_text_field( $_POST['billing_state'] ) );
             // Last name field which is used in WooCommerce
             update_user_meta( $customer_id, 'billing_state', sanitize_text_field( $_POST['billing_state'] ) );
      }
      
      
}
add_action( 'woocommerce_created_customer', 'wooc_save_extra_register_fields' );


# code for displaying product sku( unique id) under each product


add_action( 'woocommerce_after_shop_loop_item_title', 'woocommerce_after_shop_loop_item_sku_in_cart', 20, 1);
function woocommerce_after_shop_loop_item_sku_in_cart( $template )  {
	global $product;
	$sku = $product->get_sku();
	echo $sku;
}

# code to hide price and remove cart buttons for guest users

function woocommerce_template_loop_price() {
    if ( is_user_logged_in() )
        woocommerce_get_template( 'loop/price.php' );
}
function woocommerce_template_loop_add_to_cart() {
    if ( is_user_logged_in() )
        woocommerce_get_template( 'loop/add-to-cart.php' );
}
function woocommerce_template_single_price() {
    if ( is_user_logged_in() )
        woocommerce_get_template( 'single-product/price.php' );
}
function woocommerce_template_single_add_to_cart() {
    global $product;
    if ( is_user_logged_in() )
        do_action( 'woocommerce_' . $product->product_type . '_add_to_cart'  );
}

# code for custom registration redirect (successful registration)

function custom_registration_redirect() {
    wp_logout();
    return home_url('/thank-you');
}
add_action('woocommerce_registration_redirect', 'custom_registration_redirect', 2);

# search function plugin

<?php
/**
 * @package Populate movie Locations
 *
 */
/**
 * Plugin Name: searchIcon
 * Description: Search
 * Version: 1.0.0
 * Author: Pritul Padival
 * License: GPLv2 or Later
 */

if(!defined('ABSPATH')){
    die;
}

function addStyleSheetsForSearch(){
   wp_register_style('search', plugin_dir_url(__FILE__) . 'search.css' );
   wp_register_style('icon', plugin_dir_url(__FILE__) . 'http://maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css' );
    wp_enqueue_style('search', 'icon');


}

add_action( 'wp_enqueue_scripts', 'addStyleSheetsForSearch' );


function search_form_shortcode($form ) {
    $form = '<form role="search" method="get" id="searchform" action="' . home_url( '/' ) . '" >
    <div><label class="screen-reader-text" for="s">' . __('Search for:') . '</label>
    <input type="text" value="' . get_search_query() . '" name="s" id="search" />
	<img src="https://cdn1.iconfinder.com/data/icons/hawcons/32/698627-icon-111-search-512.png" id="input_img">
    <input type="submit" id="searchsubmit" class="icon" value="'. esc_attr__('Search') .'" />
    </div>
    </form>';

    return $form;
}
add_shortcode('search_form', 'search_form_shortcode');



# carousel js code

$(document).ready(function() {
  $("#myCarousel").on("slide.bs.carousel", function(e) {
    var $e = $(e.relatedTarget);
    var idx = $e.index();
    var itemsPerSlide = 3;
    var totalItems = $(".carousel-item").length;

    if (idx >= totalItems - (itemsPerSlide - 1)) {
      var it = itemsPerSlide - (totalItems - idx);
      for (var i = 0; i < it; i++) {
        // append slides to end
        if (e.direction == "left") {
          $(".carousel-item")
            .eq(i)
            .appendTo(".carousel-inner");
        } else {
          $(".carousel-item")
            .eq(0)
            .appendTo($(this).find(".carousel-inner"));
        }
      }
    }
  });
});


# code to min quantity per category


add_filter( 'woocommerce_quantity_input_args', 'min_qty_input_args', 20, 2 );
function min_qty_input_args( $args, $product ) {

    $product_categories = array('Redesign', 'Art Philosophy',
        'Scrapbooking', 'Prima', 'Mixed Media');

    $quantity = 2;
    
    $product_id = $product->is_type('variation') ? $product->get_parent_id() : $product->get_id();

    if( has_term( $product_categories, 'product_cat', $product_id ) ){
        $args['min_value'] = $quantity;
    }

    return $args;
}

// On archives pages
add_filter( 'woocommerce_loop_add_to_cart_link', 'min_qty_loop_add_to_cart_button', 50, 2 );
function min_qty_loop_add_to_cart_button( $button, $product  ) {
    // Only for non variable products
    if( $product->is_type( 'variable' ) ) return $button; // Exit

   
    $product_categories = array('Redesign', 'Art Philosophy',
        'Scrapbooking', 'Prima', 'Mixed Media');


    $quantity = 2;

  

    if( has_term( $product_categories, 'product_cat', $product->get_id() ) ){
        $class = implode( ' ', array_filter( array(
            'button',
            'product_type_' . $product->get_type(),
            $product->is_purchasable() && $product->is_in_stock() ? 'add_to_cart_button' : '',
            $product->supports( 'ajax_add_to_cart' ) ? 'ajax_add_to_cart' : '',
        ) ) );

        $button = sprintf( '<a rel="nofollow" href="%s" data-quantity="%s" data-product_id="%s" data-product_sku="%s" class="%s">%s</a>',
            esc_url( $product->add_to_cart_url() ),
            esc_attr( isset( $quantity ) ? $quantity : 1 ),
            esc_attr( $product->get_id() ),
            esc_attr( $product->get_sku() ),
            esc_attr( isset( $class ) ? $class : 'button' ),
            esc_html( $product->add_to_cart_text() )
        );
    }
    return $button;
}

# responsive table for wordpress plugin

# JS file
var headertext = [];
var headers = document.querySelectorAll("thead");
var tablebody = document.querySelectorAll("tbody");

for (var i = 0; i < headers.length; i++) {
	headertext[i]=[];
	for (var j = 0, headrow; headrow = headers[i].rows[0].cells[j]; j++) {
	  var current = headrow;
	  headertext[i].push(current.textContent);
	  }
} 

for (var h = 0, tbody; tbody = tablebody[h]; h++) {
	for (var i = 0, row; row = tbody.rows[i]; i++) {
	  for (var j = 0, col; col = row.cells[j]; j++) {
	    col.setAttribute("data-th", headertext[h][j]);
	  } 
	}
}

# CSS

@media screen and (max-width: 600px) {
    table {width:100%;}
    thead {display: none;}
    tr:nth-of-type(2n) {background-color: inherit;}
    tr td:first-child {background: #f0f0f0; font-weight:bold;font-size:1.3em;}
    tbody td {display: block;  text-align:center;}
    tbody td:before { 
        content: attr(data-th); 
        display: block;
        text-align:center;  
    }
}
 

# PHP extension
<?php
function responsive_tables_enqueue_script() {
    wp_enqueue_script( 'responsive-tables', get_stylesheet_directory_uri() . '/responsive-tables.js', $deps = array(), $ver = false, $in_footer = true );
}
add_action( 'wp_enqueue_scripts', 'responsive_tables_enqueue_script' );


# PHP authentication built in bachelors

<?php

session_start();
 

if(isset($_SESSION["loggedin"]) && $_SESSION["loggedin"] === true){
    header("location: welcome.php");
    exit;
}
 

require_once "config.php";
 
$username = $password = "";
$username_err = $password_err = "";
 

if($_SERVER["REQUEST_METHOD"] == "POST"){
 
   
    if(empty(trim($_POST["username"]))){
        $username_err = "Please enter username.";
    } else{
        $username = trim($_POST["username"]);
    }
    
   
    if(empty(trim($_POST["password"]))){
        $password_err = "Please enter your password.";
    } else{
        $password = trim($_POST["password"]);
    }
    
   
    if(empty($username_err) && empty($password_err)){
       
        $sql = "SELECT id, username, password FROM users WHERE username = ?";
        
        if($stmt = mysqli_prepare($link, $sql)){
           
            mysqli_stmt_bind_param($stmt, "s", $param_username);
            
            
            $param_username = $username;
            
            
            if(mysqli_stmt_execute($stmt)){
                
                mysqli_stmt_store_result($stmt);
                
                
                if(mysqli_stmt_num_rows($stmt) == 1){                    
                   
                    mysqli_stmt_bind_result($stmt, $id, $username, $hashed_password);
                    if(mysqli_stmt_fetch($stmt)){
                        if(password_verify($password, $hashed_password)){
                           
                            session_start();
                            
                            
                            $_SESSION["loggedin"] = true;
                            $_SESSION["id"] = $id;
                            $_SESSION["username"] = $username;                            
                            
                           
                            header("location: welcome.php");
                        } else{
                          
                            $password_err = "The password you entered was not valid.";
                        }
                    }
                } else{
                    
                    $username_err = "No account found with that username.";
                }
            } else{
                echo "Oops! Something went wrong. Please try again later.";
            }
        }
        mysqli_stmt_close($stmt);
    }
    mysqli_close($link);
}
?>



# You can even access https://github.com/AnushreeAnkola/FindASportPartner for more codes on PHP as it was a group project and i had worked on PHP and css for this project
